name: "Test and release"

on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        id: setup_go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true
          check-latest: true

      - name: Tests
        id: test
        run: |
          go mod tidy
          go test -v ./...

  build:
    name: Build
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get all tags
        run: git fetch --force --tags

      - name: Set up Go
        id: setup_go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true
          check-latest: true

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Install rpm
        run: |
          apt-get install rpm

      - name: Run GoReleaser snapshot
        id: goreleaser-snapshot
        uses: goreleaser/goreleaser-action@v4
        if: ${{ !startsWith(github.ref, 'refs/tags/v*') }}
        with:
          version: latest
          args: --rm-dist --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser release
        id: goreleaser-release
        uses: goreleaser/goreleaser-action@v4
        if: ${{ startsWith(github.ref, 'refs/tags/v*') && github.branch == 'main' }}
        with:
          project_name: ${{ github.repository }}
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #- name: Sign deb packages
      #  run: |
      #    for file in dist/*.deb; do
      #      dpkg-sig --sign builder $file
      #    done

      - name: Sign rpm packages
        run: |
          # Setup .rpmmacros
          cat <<EOF > ~/.rpmmacros
          ${{ secrets.RPMMACROS }}
          EOF
          for file in dist/*.rpm; do
            rpm --addsign $file
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ steps.goreleaser-release.outcome == 'success' || steps.goreleaser-snapshot.outcome == 'success' }}
        with:
          name: packages
          path: |
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.zip
            dist/Checksums.txt
            dist/CHANGELOG.md
          if-no-files-found: error

  create-github-release:
    name: Create GitHub release
    needs: [ build ]
    if: ${{ startsWith(github.ref, 'refs/tags/v*') && github.branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: packages

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: ${{ github.ref }}
          body_path: packages/CHANGELOG.md
          files: |
            packages/*.deb
            packages/*.rpm
            packages/*.tar.gz
            packages/*.zip
            packages/Checksums.txt
          

  upload-to-repository:
    name: Upload to repository
    needs: [ build ]
    #if: ${{ startsWith(github.ref, 'refs/tags/v*') && github.branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: packages

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.REPOSITORY_SSH_KEY }}
          log-public-key: false

      - name: Add repository host to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

      - name: Upload using rsync over SSH
        run: |
          packages=$(find packages -type f \( -name "*.rpm" -o -name "*.deb" \))
          
          for package in $packages; do
            package_name=$(basename $package)
            package_type=${package_name##*.}
            package_arch=${package_name%.$package_type}
            package_arch=${package_arch##*.}
          
            # Create directory if not exists
            ssh -p ${{ secrets.REPOSITORY_HOST_PORT }} ${{ secrets.REPOSITORY_USER }}@${{ secrets.REPOSITORY_HOST }} \
            "mkdir -p ${{ secrets.REPOSITORY_PATH }}/$package_type/$package_arch"
        
            # Upload package
            echo "Uploading $package_name to ${{ secrets.REPOSITORY_USER }}@${{ secrets.REPOSITORY_HOST }}:${{ secrets.REPOSITORY_PATH }}/$package_type/$package_arch/"
            rsync -avz --no-perms --no-owner --no-group -e "ssh -p ${{ secrets.REPOSITORY_HOST_PORT }}" $package \
            ${{ secrets.REPOSITORY_USER }}@${{ secrets.REPOSITORY_HOST }}:${{ secrets.REPOSITORY_PATH }}/$package_type/$package_arch/
          done

      - name: Update RPM repositories
        run: |
          packages=$(find packages -type f -name "*.rpm")
  
          for package in $packages; do
            package_name=$(basename $package)
            package_type=${package_name##*.}
            package_arch=${package_name%.$package_type}
            package_arch=${package_arch##*.}
        
            # Update rpm repository
            ssh -p ${{ secrets.REPOSITORY_HOST_PORT }} ${{ secrets.REPOSITORY_USER }}@${{ secrets.REPOSITORY_HOST }} \
            "createrepo --update ${{ secrets.REPOSITORY_PATH }}/$package_type/$package_arch && \
            gpghome=/home/${{ secrets.REPOSITORY_USER }}/.gnupg gpg2 --detach-sign --armor ${{ secrets.REPOSITORY_PATH }}/$package_type/$package_arch/repodata/repomd.xml"
          done

      - name: Update DEB repository
        run: |
          ssh -p ${{ secrets.REPOSITORY_HOST_PORT }} ${{ secrets.REPOSITORY_USER }}@${{ secrets.REPOSITORY_HOST }} \
            ""
