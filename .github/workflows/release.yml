name: "Test and release"

on:
  pull_request:
  push:

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.go-version.outputs.GO_VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Go version from go.mod
        id: go-version
        run: |
          sed -En 's/^go[[:space:]]+([[:digit:].]+)$/GO_VERSION=\1/p' go.mod >> $GITHUB_OUTPUT

  test:
    name: Test
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        id: setup_go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.prepare.outputs.go-version }}
          cache: true

      - name: Tests
        id: test
        run: |
          go mod tidy
          go test -v ./...

  build:
    name: Build
    needs: [ prepare, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get all tags
        run: git fetch --force --tags

      - name: Set up Go
        id: setup_go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.prepare.outputs.go-version }}
          cache: true

      - name: Run GoReleaser snapshot
        id: goreleaser-snapshot
        uses: goreleaser/goreleaser-action@v4
        if: ${{ !startsWith(github.ref, 'refs/tags/v*') }}
        with:
          version: latest
          args: --skip-publish --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser release
        id: goreleaser-release
        uses: goreleaser/goreleaser-action@v4
        if: ${{ startsWith(github.ref, 'refs/tags/v*') \
          && github.branch == 'main' }}
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ steps.goreleaser-release.outcome == 'success' \
          || steps.goreleaser-snapshot.outcome == 'success' }}
        with:
          name: packages
          path: |
            goreleaser/dist/*
          if-no-files-found: error

  upload-to-repository:
    name: Upload to repository
    needs: [ build ]
    if: ${{ startsWith(github.ref, 'refs/tags/v*') \
      && github.branch == 'main' }}
    strategy:
      matrix:
        package-format: [
          {
            "name": "deb arm",
            "path": "goreleaser/dist/*arm.deb",
            "path_in_repo": "deb/arm/",
          },
          {
            "name": "deb arm64",
            "path": "goreleaser/dist/*arm64.deb",
            "path_in_repo": "deb/arm64/",
          },
          {
            "name": "deb amd64",
            "path": "goreleaser/dist/*amd64.deb",
            "path_in_repo": "deb/amd64/",
          },
          {
            "name": "rpm armhfp",
            "path": "goreleaser/dist/*.arm.rpm",
            "path_in_repo": "rpm/armhfp/"
          },
          {
            "name": "rpm aarch64",
            "path": "goreleaser/dist/*.aarch64.rpm",
            "path_in_repo": "rpm/aarch64/"
          },
          {
            "name": "rpm x86_64",
            "path": "goreleaser/dist/*.x86_64.rpm",
            "path_in_repo": "rpm/x86_64/"
          },]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: packages

      - name: Upload using rsync
        run: |
          rsync -avz --delete --no-perms --no-owner --no-group \
            packages/${{ matrix.package-format.path }} \
            ${{ secrets.REPOSITORY_USER }}@${{ secrets.REPOSITORY_HOST }}:${{ secrets.REPOSITORY_PATH }}/${{ matrix.package-format.path_in_repo }}

      - name: Update RPM repository
        if: startsWith(matrix.package-format.name, 'rpm')
        run: |
          ssh ${{ secrets.REPOSITORY_USER }}@${{ secrets.REPOSITORY_HOST }} \
            "createrepo --update ${{ secrets.REPOSITORY_PATH }}/${{ matrix.package-format.path_in_repo }}"

      - name: Update DEB repository
        if: startsWith(matrix.package-format.name, 'deb')
        run: |
          ssh ${{ secrets.REPOSITORY_USER }}@${{ secrets.REPOSITORY_HOST }} \
            ""
